from django.db import models

# Create your models here.
# class Score(models.Model):
#     cid = models.IntegerField(default=0)
#     drug_name = models.TextField(default='')
#     drug_synonyms = models.TextField(default='')
#     docking_score = models.DecimalField(max_digits=4, decimal_places=2)
#     protein_type = models.CharField(max_length=20)
#     popular_views = models.IntegerField()
#     drug_source = models.CharField(max_length=50)

class DrugInfo(models.Model):
    cid = models.IntegerField(db_index=True)
    cas = models.CharField(max_length=20, default='-')
    drug_name = models.TextField(default='')
    drug_synonyms = models.TextField(default='')
    popular_views = models.IntegerField(default=0)
    drug_source = models.CharField(max_length=50)
    drugbank_id = models.CharField(max_length=10)
    inchi = models.TextField(default='')
    inchikey = models.CharField(max_length=50, default='')
    smiles = models.TextField(default='')
    chembl_id = models.CharField(max_length=20, default='')
    chembl4303805_activities = models.FloatField(default=0.0)
    chembl4303819_activities = models.FloatField(default=0.0)
    chembl4303810_activities = models.FloatField(default=0.0)
    chembl_smiles = models.TextField(default='')
    formula = models.TextField(default='')
    kegg_compound_id = models.CharField(max_length=10, default='')
    kegg_drug_id = models.CharField(max_length=10, default='')
    drugbank_smiles = models.TextField(default='')
    pert_iname = models.TextField(default='')
    clinical_phase = models.TextField(default='')
    moa = models.TextField(default='')
    target = models.TextField(default='')
    disease_area = models.TextField(default='')
    indication = models.TextField(default='')
    canonical_smiles = models.TextField(default='')
    num_hdonors = models.IntegerField(default=0)
    num_hacceptors = models.IntegerField(default=0)
    mol_weight = models.FloatField(default=0.0)
    mol_logp = models.FloatField(default=0.0)

    rotatable_bonds = models.IntegerField(default=0)
    number_of_atoms = models.IntegerField(default=0)
    molar_refractivity = models.FloatField(default=0.0)
    topological_surface_area_mapping = models.FloatField(default=0.0)
    formal_charge = models.FloatField(default=0.0)
    heavy_atoms = models.IntegerField(default=0)
    num_of_rings = models.IntegerField(default=0)

    num_active_fragments = models.IntegerField(default=0)
    active_fragments = models.TextField(default='')

    show = models.BooleanField(default=True)

    def __str__(self):
        return "{}|{}|{}".format(self.cid, self.cas, self.drug_name)

class CidProteinScore(models.Model):
    drug = models.ForeignKey(DrugInfo, on_delete=models.CASCADE)
    protein_type = models.CharField(max_length=20)
    docking_score = models.DecimalField(max_digits=4, decimal_places=2)

# class Cid2Drugbankid(models.Model):
#     cid = models.IntegerField()
#     drugbank_id = models.CharField(max_length=10)

class DrugScreening(models.Model):
    drugbank_id = models.CharField(max_length=10)
    name = models.TextField()
    z_score_pan = models.FloatField()
    z_score_sars = models.FloatField()
    z_score_mers = models.FloatField()
    z_score_ibv = models.FloatField()
    z_score_mhv = models.FloatField()
    p_value_pan = models.FloatField()
    p_value_sars = models.FloatField()
    p_value_mers = models.FloatField()
    p_value_ibv = models.FloatField()
    p_value_mhv = models.FloatField()

class GSEAScore(models.Model):
    cmap_instance = models.IntegerField()
    drugbank_id = models.CharField(max_length=10)
    name = models.TextField()
    dose = models.FloatField()
    cell_line = models.TextField()
    mers1_es = models.FloatField()
    mers1_p = models.FloatField()
    sars1_es = models.FloatField()
    sars1_p = models.FloatField()
    sars2_es = models.FloatField()
    sars2_p = models.FloatField()

class RelatedDocuments(models.Model):
    cid = models.IntegerField(db_index=True)
    titles = models.TextField()
    urls = models.TextField()

class NHIDrugInfo(models.Model):
    new_mark = models.BinaryField(max_length=4)
    oral = models.BinaryField(max_length=20)
    single_or_compound = models.BinaryField(max_length=4)
    code = models.BinaryField(max_length=20)
    price = models.BinaryField(max_length=18)
    price_start_date = models.BinaryField(max_length=14)
    price_end_date = models.BinaryField(max_length=14)
    english_name = models.BinaryField(max_length=240)
    volume = models.BinaryField(max_length=14)
    unit = models.BinaryField(max_length=104)
    main_ingredient_name = models.BinaryField(max_length=112)
    main_ingredient_volume = models.BinaryField(max_length=24)
    main_ingredient_unit = models.BinaryField(max_length=102)
    dosage = models.BinaryField(max_length=172)
    company_name = models.BinaryField(max_length=40)
    category_code = models.BinaryField(max_length=4)
    quality_category_code = models.BinaryField(max_length=2)
    chinese_name = models.BinaryField(max_length=256)
    category_name = models.BinaryField(max_length=600)
    second_ingredient_name = models.BinaryField(max_length=112)
    second_ingredient_volume = models.BinaryField(max_length=22)
    second_ingredient_unit = models.BinaryField(max_length=102)
    third_ingredient_name = models.BinaryField(max_length=112)
    third_ingredient_volume = models.BinaryField(max_length=22)
    third_ingredient_unit = models.BinaryField(max_length=102)
    fourth_ingredient_name = models.BinaryField(max_length=112)
    fourth_ingredient_volume = models.BinaryField(max_length=22)
    fourth_ingredient_unit = models.BinaryField(max_length=102)
    fifth_ingredient_name = models.BinaryField(max_length=112)
    fifth_ingredient_volume = models.BinaryField(max_length=22)
    fifth_ingredient_unit = models.BinaryField(max_length=102)
    sixth_ingredient_name = models.BinaryField(max_length=112)
    sixth_ingredient_volume = models.BinaryField(max_length=22)
    sixth_ingredient_unit = models.BinaryField(max_length=102)
    production_company = models.BinaryField(max_length=84)
    atc_code = models.BinaryField(max_length=16)
    less_than_five_year = models.BinaryField(max_length=2)

class DrugSimilarity(models.Model):
    # drug1 = models.ForeignKey(DrugInfo, on_delete=models.CASCADE, related_name='drugsimilarity_drug1')
    # drug2 = models.ForeignKey(DrugInfo, on_delete=models.CASCADE, related_name='drugsimilarity_drug2')
    # dice_similarity_score = models.FloatField()
    drug1_cid = models.IntegerField(db_index=True, default=0)
    drug2_cid = models.IntegerField(default=0)
    dice_similarity_score = models.FloatField(default=0)


 